name: PR Review Notification with Diff

on:
  pull_request_review:
    types: [submitted, edited, dismissed]

jobs:
  notify-api:
    runs-on: ubuntu-latest
    steps:
      - name: Send PR Review and Diff to API and Comment on PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/github-script@v7
        with:
          script: |
            const prReview = context.payload.review;
            const prNumber = context.payload.pull_request.number;
            const repoName = context.payload.repository.full_name;
            const [owner, repo] = repoName.split('/');

            // Assuming `fetch` is available or use `octokit.request` as an alternative
            const diffUrl = `https://api.github.com/repos/${repoName}/pulls/${prNumber}`;

            const headers = {
              'Accept': 'application/vnd.github.v3.diff',
              'Authorization': `token ${process.env.GITHUB_TOKEN}`,
            };

            // Use octokit.request for GitHub API calls if fetch is not available
            octokit.request('GET', diffUrl, { headers: headers })
              .then(({data}) => {
                const prDiff = data;
                const apiEndpoint = 'https://code-digester-006167766c6e.herokuapp.com/llm/add-pr-data';
                const payload = {
                  prNumber: prNumber,
                  repoName: repoName,
                  reviewId: prReview.id,
                  reviewState: prReview.state,
                  reviewBody: prReview.body,
                  prDiff: prDiff,
                };

                // Assuming you have a function to handle the API request
                return fetch(apiEndpoint, {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                  },
                  body: JSON.stringify(payload),
                })
                .then(response => response.json())
                .then(data => {
                  const commentBody = `API Response: ${JSON.stringify(data, null, 2)}`;
                  return octokit.issues.createComment({
                    owner,
                    repo,
                    issue_number: prNumber,
                    body: commentBody,
                  });
                });
              })
              .then(response => console.log(`Comment posted: ${response.data.html_url}`))
              .catch(error => console.error(`Error: ${error.toString()}`));
